// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package puluminetcup

import (
	"context"
	"reflect"

	"errors"
	"github.com/blackdark/pulumi-netcup/sdk/go/pulumi-netcup/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A DNS record managed by Netcup DNS service
type DNSRecord struct {
	pulumi.CustomResourceState

	// The domain name for the DNS record
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The fully qualified domain name
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The hostname for the DNS record
	Name pulumi.StringOutput `pulumi:"name"`
	// The priority for the DNS record
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The unique identifier for the DNS record
	RecordId pulumi.StringOutput `pulumi:"recordId"`
	// The DNS record type
	Type pulumi.StringOutput `pulumi:"type"`
	// The value/destination for the DNS record
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewDNSRecord registers a new resource with the given unique name, arguments, and options.
func NewDNSRecord(ctx *pulumi.Context,
	name string, args *DNSRecordArgs, opts ...pulumi.ResourceOption) (*DNSRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DNSRecord
	err := ctx.RegisterResource("netcup:index:DNSRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSRecord gets an existing DNSRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSRecordState, opts ...pulumi.ResourceOption) (*DNSRecord, error) {
	var resource DNSRecord
	err := ctx.ReadResource("netcup:index:DNSRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSRecord resources.
type dnsrecordState struct {
}

type DNSRecordState struct {
}

func (DNSRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsrecordState)(nil)).Elem()
}

type dnsrecordArgs struct {
	// The domain name for the DNS record (e.g., 'example.com')
	Domain string `pulumi:"domain"`
	// The hostname for the DNS record. Use '@' for root domain, or specify subdomain (e.g., 'www', 'mail')
	Name string `pulumi:"name"`
	// The priority for MX and SRV records (required for these types, ignored for others)
	Priority *string `pulumi:"priority"`
	// The DNS record type. Supported types: A, AAAA, CNAME, MX, TXT, SRV, CAA, TLSA, NS, DS, OPENPGPKEY, SMIMEA, SSHFP
	Type string `pulumi:"type"`
	// The value/destination for the DNS record (e.g., IP address for A records, hostname for CNAME)
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a DNSRecord resource.
type DNSRecordArgs struct {
	// The domain name for the DNS record (e.g., 'example.com')
	Domain pulumi.StringInput
	// The hostname for the DNS record. Use '@' for root domain, or specify subdomain (e.g., 'www', 'mail')
	Name pulumi.StringInput
	// The priority for MX and SRV records (required for these types, ignored for others)
	Priority pulumi.StringPtrInput
	// The DNS record type. Supported types: A, AAAA, CNAME, MX, TXT, SRV, CAA, TLSA, NS, DS, OPENPGPKEY, SMIMEA, SSHFP
	Type pulumi.StringInput
	// The value/destination for the DNS record (e.g., IP address for A records, hostname for CNAME)
	Value pulumi.StringInput
}

func (DNSRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsrecordArgs)(nil)).Elem()
}

type DNSRecordInput interface {
	pulumi.Input

	ToDNSRecordOutput() DNSRecordOutput
	ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput
}

func (*DNSRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSRecord)(nil)).Elem()
}

func (i *DNSRecord) ToDNSRecordOutput() DNSRecordOutput {
	return i.ToDNSRecordOutputWithContext(context.Background())
}

func (i *DNSRecord) ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordOutput)
}

// DNSRecordArrayInput is an input type that accepts DNSRecordArray and DNSRecordArrayOutput values.
// You can construct a concrete instance of `DNSRecordArrayInput` via:
//
//	DNSRecordArray{ DNSRecordArgs{...} }
type DNSRecordArrayInput interface {
	pulumi.Input

	ToDNSRecordArrayOutput() DNSRecordArrayOutput
	ToDNSRecordArrayOutputWithContext(context.Context) DNSRecordArrayOutput
}

type DNSRecordArray []DNSRecordInput

func (DNSRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSRecord)(nil)).Elem()
}

func (i DNSRecordArray) ToDNSRecordArrayOutput() DNSRecordArrayOutput {
	return i.ToDNSRecordArrayOutputWithContext(context.Background())
}

func (i DNSRecordArray) ToDNSRecordArrayOutputWithContext(ctx context.Context) DNSRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordArrayOutput)
}

// DNSRecordMapInput is an input type that accepts DNSRecordMap and DNSRecordMapOutput values.
// You can construct a concrete instance of `DNSRecordMapInput` via:
//
//	DNSRecordMap{ "key": DNSRecordArgs{...} }
type DNSRecordMapInput interface {
	pulumi.Input

	ToDNSRecordMapOutput() DNSRecordMapOutput
	ToDNSRecordMapOutputWithContext(context.Context) DNSRecordMapOutput
}

type DNSRecordMap map[string]DNSRecordInput

func (DNSRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSRecord)(nil)).Elem()
}

func (i DNSRecordMap) ToDNSRecordMapOutput() DNSRecordMapOutput {
	return i.ToDNSRecordMapOutputWithContext(context.Background())
}

func (i DNSRecordMap) ToDNSRecordMapOutputWithContext(ctx context.Context) DNSRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordMapOutput)
}

type DNSRecordOutput struct{ *pulumi.OutputState }

func (DNSRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSRecord)(nil)).Elem()
}

func (o DNSRecordOutput) ToDNSRecordOutput() DNSRecordOutput {
	return o
}

func (o DNSRecordOutput) ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput {
	return o
}

// The domain name for the DNS record
func (o DNSRecordOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSRecord) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The fully qualified domain name
func (o DNSRecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSRecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The hostname for the DNS record
func (o DNSRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The priority for the DNS record
func (o DNSRecordOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DNSRecord) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// The unique identifier for the DNS record
func (o DNSRecordOutput) RecordId() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSRecord) pulumi.StringOutput { return v.RecordId }).(pulumi.StringOutput)
}

// The DNS record type
func (o DNSRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSRecord) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The value/destination for the DNS record
func (o DNSRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSRecord) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type DNSRecordArrayOutput struct{ *pulumi.OutputState }

func (DNSRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSRecord)(nil)).Elem()
}

func (o DNSRecordArrayOutput) ToDNSRecordArrayOutput() DNSRecordArrayOutput {
	return o
}

func (o DNSRecordArrayOutput) ToDNSRecordArrayOutputWithContext(ctx context.Context) DNSRecordArrayOutput {
	return o
}

func (o DNSRecordArrayOutput) Index(i pulumi.IntInput) DNSRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DNSRecord {
		return vs[0].([]*DNSRecord)[vs[1].(int)]
	}).(DNSRecordOutput)
}

type DNSRecordMapOutput struct{ *pulumi.OutputState }

func (DNSRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSRecord)(nil)).Elem()
}

func (o DNSRecordMapOutput) ToDNSRecordMapOutput() DNSRecordMapOutput {
	return o
}

func (o DNSRecordMapOutput) ToDNSRecordMapOutputWithContext(ctx context.Context) DNSRecordMapOutput {
	return o
}

func (o DNSRecordMapOutput) MapIndex(k pulumi.StringInput) DNSRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DNSRecord {
		return vs[0].(map[string]*DNSRecord)[vs[1].(string)]
	}).(DNSRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordInput)(nil)).Elem(), &DNSRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordArrayInput)(nil)).Elem(), DNSRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordMapInput)(nil)).Elem(), DNSRecordMap{})
	pulumi.RegisterOutputType(DNSRecordOutput{})
	pulumi.RegisterOutputType(DNSRecordArrayOutput{})
	pulumi.RegisterOutputType(DNSRecordMapOutput{})
}
