// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.blackdark.netcup;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DNSRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final DNSRecordArgs Empty = new DNSRecordArgs();

    /**
     * The domain name for the DNS record (e.g., &#39;example.com&#39;)
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return The domain name for the DNS record (e.g., &#39;example.com&#39;)
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * The hostname for the DNS record. Use &#39;{@literal @}&#39; for root domain, or specify subdomain (e.g., &#39;www&#39;, &#39;mail&#39;)
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The hostname for the DNS record. Use &#39;{@literal @}&#39; for root domain, or specify subdomain (e.g., &#39;www&#39;, &#39;mail&#39;)
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The priority for MX and SRV records (required for these types, ignored for others)
     * 
     */
    @Import(name="priority")
    private @Nullable Output<String> priority;

    /**
     * @return The priority for MX and SRV records (required for these types, ignored for others)
     * 
     */
    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The DNS record type. Supported types: A, AAAA, CNAME, MX, TXT, SRV, CAA, TLSA, NS, DS, OPENPGPKEY, SMIMEA, SSHFP
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The DNS record type. Supported types: A, AAAA, CNAME, MX, TXT, SRV, CAA, TLSA, NS, DS, OPENPGPKEY, SMIMEA, SSHFP
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The value/destination for the DNS record (e.g., IP address for A records, hostname for CNAME)
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The value/destination for the DNS record (e.g., IP address for A records, hostname for CNAME)
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private DNSRecordArgs() {}

    private DNSRecordArgs(DNSRecordArgs $) {
        this.domain = $.domain;
        this.name = $.name;
        this.priority = $.priority;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DNSRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DNSRecordArgs $;

        public Builder() {
            $ = new DNSRecordArgs();
        }

        public Builder(DNSRecordArgs defaults) {
            $ = new DNSRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain name for the DNS record (e.g., &#39;example.com&#39;)
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain name for the DNS record (e.g., &#39;example.com&#39;)
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param name The hostname for the DNS record. Use &#39;{@literal @}&#39; for root domain, or specify subdomain (e.g., &#39;www&#39;, &#39;mail&#39;)
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The hostname for the DNS record. Use &#39;{@literal @}&#39; for root domain, or specify subdomain (e.g., &#39;www&#39;, &#39;mail&#39;)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority The priority for MX and SRV records (required for these types, ignored for others)
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority for MX and SRV records (required for these types, ignored for others)
         * 
         * @return builder
         * 
         */
        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param type The DNS record type. Supported types: A, AAAA, CNAME, MX, TXT, SRV, CAA, TLSA, NS, DS, OPENPGPKEY, SMIMEA, SSHFP
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The DNS record type. Supported types: A, AAAA, CNAME, MX, TXT, SRV, CAA, TLSA, NS, DS, OPENPGPKEY, SMIMEA, SSHFP
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value The value/destination for the DNS record (e.g., IP address for A records, hostname for CNAME)
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value/destination for the DNS record (e.g., IP address for A records, hostname for CNAME)
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public DNSRecordArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("DNSRecordArgs", "domain");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DNSRecordArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DNSRecordArgs", "type");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("DNSRecordArgs", "value");
            }
            return $;
        }
    }

}
