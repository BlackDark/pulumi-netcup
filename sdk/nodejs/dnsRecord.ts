// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A DNS record managed by Netcup DNS service
 */
export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netcup:index:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * The domain name for the DNS record
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The fully qualified domain name
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * The hostname for the DNS record
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The priority for the DNS record
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier for the DNS record
     */
    public /*out*/ readonly recordId!: pulumi.Output<string>;
    /**
     * The DNS record type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The value/destination for the DNS record
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["recordId"] = undefined /*out*/;
        } else {
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["recordId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * The domain name for the DNS record (e.g., 'example.com')
     */
    domain: pulumi.Input<string>;
    /**
     * The hostname for the DNS record. Use '@' for root domain, or specify subdomain (e.g., 'www', 'mail')
     */
    name: pulumi.Input<string>;
    /**
     * The priority for MX and SRV records (required for these types, ignored for others)
     */
    priority?: pulumi.Input<string>;
    /**
     * The DNS record type. Supported types: A, AAAA, CNAME, MX, TXT, SRV, CAA, TLSA, NS, DS, OPENPGPKEY, SMIMEA, SSHFP
     */
    type: pulumi.Input<string>;
    /**
     * The value/destination for the DNS record (e.g., IP address for A records, hostname for CNAME)
     */
    value: pulumi.Input<string>;
}
